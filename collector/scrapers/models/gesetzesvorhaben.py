# coding: utf-8

"""
    Specification for the Landtagszusammenfasser Project

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from models.identifikator import Identifikator
from models.station import Station
from typing import Optional, Set
from typing_extensions import Self

class Gesetzesvorhaben(BaseModel):
    """
    Gesetzesvorhaben
    """ # noqa: E501
    api_id: Optional[StrictStr] = None
    titel: Optional[StrictStr] = None
    verfassungsaendernd: Optional[StrictBool] = None
    trojaner: Optional[StrictBool] = None
    initiative: Optional[StrictStr] = None
    typ: Optional[StrictStr] = None
    ids: Optional[List[Identifikator]] = None
    links: Optional[List[StrictStr]] = None
    stationen: Optional[List[Station]] = None
    __properties: ClassVar[List[str]] = ["api_id", "titel", "verfassungsaendernd", "trojaner", "initiative", "typ", "ids", "links", "stationen"]

    @field_validator('typ')
    def typ_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Einspruchsgesetz', 'Zustimmungsgesetz', 'Vorklsbegehren', 'Sonstig']):
            raise ValueError("must be one of enum values ('Einspruchsgesetz', 'Zustimmungsgesetz', 'Vorklsbegehren', 'Sonstig')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Gesetzesvorhaben from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ids (list)
        _items = []
        if self.ids:
            for _item_ids in self.ids:
                if _item_ids:
                    _items.append(_item_ids.to_dict())
            _dict['ids'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in stationen (list)
        _items = []
        if self.stationen:
            for _item_stationen in self.stationen:
                if _item_stationen:
                    _items.append(_item_stationen.to_dict())
            _dict['stationen'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Gesetzesvorhaben from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "api_id": obj.get("api_id"),
            "titel": obj.get("titel"),
            "verfassungsaendernd": obj.get("verfassungsaendernd"),
            "trojaner": obj.get("trojaner"),
            "initiative": obj.get("initiative"),
            "typ": obj.get("typ"),
            "ids": [Identifikator.from_dict(_item) for _item in obj["ids"]] if obj.get("ids") is not None else None,
            "links": obj.get("links"),
            "stationen": [Station.from_dict(_item) for _item in obj["stationen"]] if obj.get("stationen") is not None else None
        })
        return _obj


