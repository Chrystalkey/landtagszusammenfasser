# coding: utf-8

"""
    Specification for the Landtagszusammenfasser Project

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from models.dokument import Dokument
from models.stellungnahme import Stellungnahme
from typing import Optional, Set
from typing_extensions import Self

class Station(BaseModel):
    """
    Station
    """ # noqa: E501
    datum: Optional[date] = None
    titel: Optional[StrictStr] = None
    dokumente: Optional[List[Dokument]] = None
    url: Optional[StrictStr] = None
    parlament: Optional[StrictStr] = None
    schlagworte: Optional[List[StrictStr]] = None
    stellungnahmen: Optional[List[Stellungnahme]] = None
    zuordnung: Optional[StrictStr] = None
    stationstyp: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["datum", "titel", "dokumente", "url", "parlament", "schlagworte", "stellungnahmen", "zuordnung", "stationstyp"]

    @field_validator('parlament')
    def parlament_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BT', 'BR', 'BV', 'EK', 'BB', 'BY', 'BE', 'HB', 'HH', 'HE', 'MV', 'NI', 'NW', 'RP', 'SL', 'SN', 'TH', 'SH', 'BW', 'ST']):
            raise ValueError("must be one of enum values ('BT', 'BR', 'BV', 'EK', 'BB', 'BY', 'BE', 'HB', 'HH', 'HE', 'MV', 'NI', 'NW', 'RP', 'SL', 'SN', 'TH', 'SH', 'BW', 'ST')")
        return value

    @field_validator('stationstyp')
    def stationstyp_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['EntwurfReferentenentwurf', 'EntwurfEckpunktepapier', 'ParlamentInitiative', 'ParlamentKabinettsbeschluss', 'ParlamentBeschlussempfehlung', 'ParlamentPlenarsitzung', 'ParlamentBeschluss', 'Inkraftgetreten', 'Abgelehnt']):
                raise ValueError("each list item must be one of ('EntwurfReferentenentwurf', 'EntwurfEckpunktepapier', 'ParlamentInitiative', 'ParlamentKabinettsbeschluss', 'ParlamentBeschlussempfehlung', 'ParlamentPlenarsitzung', 'ParlamentBeschluss', 'Inkraftgetreten', 'Abgelehnt')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Station from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dokumente (list)
        _items = []
        if self.dokumente:
            for _item_dokumente in self.dokumente:
                if _item_dokumente:
                    _items.append(_item_dokumente.to_dict())
            _dict['dokumente'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in stellungnahmen (list)
        _items = []
        if self.stellungnahmen:
            for _item_stellungnahmen in self.stellungnahmen:
                if _item_stellungnahmen:
                    _items.append(_item_stellungnahmen.to_dict())
            _dict['stellungnahmen'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Station from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "datum": obj.get("datum"),
            "titel": obj.get("titel"),
            "dokumente": [Dokument.from_dict(_item) for _item in obj["dokumente"]] if obj.get("dokumente") is not None else None,
            "url": obj.get("url"),
            "parlament": obj.get("parlament"),
            "schlagworte": obj.get("schlagworte"),
            "stellungnahmen": [Stellungnahme.from_dict(_item) for _item in obj["stellungnahmen"]] if obj.get("stellungnahmen") is not None else None,
            "zuordnung": obj.get("zuordnung"),
            "stationstyp": obj.get("stationstyp")
        })
        return _obj


